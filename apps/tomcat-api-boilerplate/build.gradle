plugins { }

// mainClassName = "io.github.gipo999.rest.base.App"

// common excludes for spotless, from root gradle.properties
// def commonExcludes = project.properties['commonExcludes'].split(',')

// shared configs
// shared group, here or globally?
group = 'io.github.gipo999'
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = 21
targetCompatibility = 21
project.webAppDirName = 'src/main/webapp'

// IMP: compatibliity with tomcat 9?
// jersey 2+ works only with tomcat 9+
// jersey 3+ works only with tomcat 10+
// check docker compose file
// https://stackoverflow.com/questions/62595510/severe-servlet-jersey-web-application-in-web-application-restapp-threw-loa
def JERSEY_VERSION = "2+"
def TOMCAT_VERSION = "9+"

// TODO: group those deps in root to apply to all tomcat apps
dependencies {

	//  NOTE: can import directly from the monorepo libs
	implementation project(':libs:smispi')

	implementation(group: 'org.slf4j', name: 'slf4j-api', version: '2+')

	compileOnly(group: 'org.apache.tomcat', name: 'tomcat-catalina', version: "${TOMCAT_VERSION}")

	implementation('javax.xml.bind:jaxb-api:2.3.1')

	implementation(group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: "2+")

	implementation(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${JERSEY_VERSION}")

	implementation(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: "${JERSEY_VERSION}")

	implementation(group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: "${JERSEY_VERSION}")

	implementation(group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: "${JERSEY_VERSION}")

	implementation(group: 'org.slf4j', name: 'slf4j-simple', version: '2+')

	implementation(group: 'com.google.code.gson', name: 'gson', version: "2+")


	testImplementation(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${JERSEY_VERSION}")


	//    implementation group: 'com.smi', name: 'smi-commons-gson', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-jersey', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-yaml', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-lang', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-singleton', version: "${SMI_COMMONS}"
	//    implementation group: 'com.smi', name: 'smi-commons-pool', version: "${SMI_COMMONS}"
}


// no main method
// https://stackoverflow.com/questions/8630496/main-class-of-a-tomcat-web-application
// https://gist.github.com/Antowka/b99b6259376a7eb44c22

// repositories {
// 	mavenCentral()
// }

// eclipse.project {
//     natures "org.eclipse.buildship.core.gradleprojectnature"
// }

// def _groupID = 'io.github.gipo999'
// def _artifactID = 'rest.base'
// def _mainClass = 'App'

// tasks.withType(Checkstyle).configureEach {
//     configDirectory.set(file("../../checkstyle"))
// }


// TODO: make sure we are not checking and formatting useless files

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

// override root project config
test {
	// dependsOn 'check'

	finalizedBy jacocoTestReport

	useJUnitPlatform {
		exclude("**/integration/**")
	}

	testLogging {
		events "passed", "skipped", "failed"
	}
}

tasks.register("buildWar") {
	dependsOn "check"
	dependsOn "test"
	dependsOn "war"
}

task cleanEclipse(type: Delete, overwrite: true) {
	delete '.project'

	delete '.classpath'

	delete '.settings'

	delete "bin"
}

// TODO: make war start the test command, test start the check command

tasks.register('integrationTest', Test) {
	group = 'verification'

	useJUnitPlatform {
		include("**/integration/**")
	}

	testLogging {
		events "passed", "skipped", "failed"
	}
}
