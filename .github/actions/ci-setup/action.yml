# Composite private action to setup the CI environment with all the tools needed for the project.
# We could install pre-commit too here
name: Setup CI
runs:
  using: composite
  steps:
    # - uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4
    #   name: Setup .NET
    # - name: Setup Go cache
    #   uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
    #   env:
    #     cache-version: v1
    #   id: go-cache
    #   with:
    #     path: /home/runner/go/bin
    #     key: ${{ runner.os }}-go-bin-${{ env.cache-version }}
    #     restore-keys: |
    #       ${{ runner.os }}-go-bin-${{ env.cache-version }}
    #       ${{ runner.os }}-go-bin-
    #       ${{ runner.os }}-
    # - uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
    #   name: Setup Go
    #   with: # Set the Go version to use
    #     go-version: 1.22.2
    # - uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5
    #   name: Setup Python
    #   with:
    #     python-version: 3.12
    # python is pre-installed
    - name: Install pre-commit
      shell: bash
      run: pipx install pre-commit
    - name: Install Task
      uses: arduino/setup-task@v2
    - name: Setup Node.js 22
      uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
      with:
        node-version: 22
    - uses: pnpm/action-setup@v3
      name: Install pnpm
      # respects package.json packageManager from corepack if present when no version is specified
      with:
        run_install: false
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    - uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    # NX cache
    - name: Cache Nx
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      id: cache-nx
      with:
        path: .cache/nx
        key: ${{ runner.os }}-nx-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-nx-${{ hashFiles('pnpm-lock.yaml') }}
          ${{ runner.os }}-nx-
    # install nx cli
    - name: Install Nx CLI
      shell: bash
      run: npm install -g nx@latest
    - name: install tsx
      shell: bash
      run: npm install -g tsx
    # install dependencies
    - name: Install dependencies
      shell: bash
      run: pnpm install --frozen-lockfile
    - uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4
      name: Setup Java Step
      with:
        distribution: temurin
        java-version: 21
    - name: Setup Gradle Step
      uses: gradle/actions/setup-gradle@db19848a5fa7950289d3668fb053140cf3028d43 # v3
      with:
        gradle-version: 8.7
