# Composite private action to setup the CI environment with all the tools needed for the project.
# We could install pre-commit too here
name: Setup CI
inputs:
  install_scripts:
    description:
      'Whether to install scripts while installing node packages or not'
    required: false
    default: true
runs:
  using: composite
  steps:
    - name: Install pre-commit
      shell: bash
      run: pipx install pre-commit
    - name: Setup Node.js 22
      uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
      with:
        node-version: 22
    - uses: pnpm/action-setup@v3
      name: Install pnpm
      # respects package.json packageManager from corepack if present when no version is specified
      with:
        run_install: false
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    - uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    # NX cache
    # - name: Cache Nx
    #   uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
    #   id: cache-nx
    #   with:
    #     path: .cache/nx
    #     key: ${{ runner.os }}-nx-${{ hashFiles('pnpm-lock.yaml') }}
    #     restore-keys: |
    #       ${{ runner.os }}-nx-${{ hashFiles('pnpm-lock.yaml') }}
    #       ${{ runner.os }}-nx-
    # install nx cli
    - name: Install Nx CLI
      shell: bash
      run: npm install -g nx@latest
    - name: install tsx
      shell: bash
      run: npm install -g tsx
    # install dependencies
    - name: Install dependencies
      shell: bash
      run: |
        if [[ "${{ inputs.install_scripts }}" == "true" ]]; then
          pnpm install --frozen-lockfile
        else
          pnpm install --frozen-lockfile --ignore-scripts
        fi
