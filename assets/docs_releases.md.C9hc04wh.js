import{_ as s,c as e,o as i,a5 as a}from"./chunks/framework.BGfKG4OG.js";const u=JSON.parse('{"title":"Releases","description":"","frontmatter":{},"headers":[],"relativePath":"docs/releases.md","filePath":"docs/releases.md"}'),n={name:"docs/releases.md"},t=a(`<h1 id="releases" tabindex="-1">Releases <a class="header-anchor" href="#releases" aria-label="Permalink to &quot;Releases&quot;">​</a></h1><p>doc section about versioning, releases and publishing in nx</p><h2 id="changesets" tabindex="-1">changesets <a class="header-anchor" href="#changesets" aria-label="Permalink to &quot;changesets&quot;">​</a></h2><ul><li>doesn&#39;t provide direct ability to customize the publish command.</li><li>github release of every tagged project is done by the <a href="https://github.com/changesets/action" target="_blank" rel="noreferrer">changesets/action</a></li><li>doesn&#39;t provide custom assets to be added to the release</li><li>provides some individual commands: <code>add</code>, <code>version</code>, <code>publish</code>, <code>tag</code>, <code>pre enter/exit</code></li><li><code>tag</code> command allows tagging only public or both public + private packages</li><li>allows grouping subprojects and bumping them together</li></ul><h3 id="pre-release" tabindex="-1">pre-release <a class="header-anchor" href="#pre-release" aria-label="Permalink to &quot;pre-release&quot;">​</a></h3><p>One can enter pre-release mode by specifying <code>changeset pre enter &lt;tag&gt;</code> flag</p><p>This creates a <code>{workspaceRoot}/.changeset/pre.json</code> where it keeps track of the reference tag versions.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pre&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;initialVersions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@gipo355/angular-test-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@gipo355/tomcat-angular-boilerplate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@gipo355/tomcat-api-boilerplate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@gipo355/angular-lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@gipo355/angular-lib-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@gipo355/jakarta-base-rest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@gipo355/smispi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;changesets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;angry-laws-jam&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;green-tomatoes-deliver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;mean-mirrors-call&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;modern-buttons-hear&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;old-eels-enjoy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;silent-weeks-tap&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>when ready to reconcile the pre-release version with the stable version, one can run:</p><ul><li><code>changeset pre exit</code> to define an intent to exit</li><li><code>changeset version</code> to consume changesets and bump the packages to the next version (based on initialVersions + changesets)</li></ul><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>this is the most error-prone part of the process</p></div><p>After a reconciliation, the changes must be reflected in the <code>pre</code> branch if it&#39;s a rolling <code>dev</code> release</p><p>A possible flow could be:</p><ul><li>create a branch based on the new stable, run <code>changeset pre enter dev</code> there, merge the changes back into <code>dev</code> to reflect the new initial versions</li></ul><h4 id="handling-a-release-candidate-rc" tabindex="-1"><strong>Handling a Release Candidate (rc)</strong> <a class="header-anchor" href="#handling-a-release-candidate-rc" aria-label="Permalink to &quot;**Handling a Release Candidate (rc)**&quot;">​</a></h4><p>Assuming <code>dev</code> is a rolling branch, the <code>rc</code> branch is created from <code>dev</code> and prepares the release candidate to be tested and then merged into <code>main</code>.</p><p>Those could be the steps on branch <code>rc</code> or <code>next</code> forked from the <code>dev</code> branch:</p><ul><li><code>changeset pre exit</code> <em>to define an intent to exit</em></li><li><code>changeset version</code> <em>to consume changesets and bump the packages to the next version (based on initialVersions + changesets)</em> - this produces the &quot;stable&quot; versions</li><li><code>changeset pre enter rc</code> <em>to enter pre-release mode for release candidate</em> - this would base the RC initial versions on the stable versions derived from dev and allow publishing it with the <code>rc</code> tag</li><li>when ready to release the RC, <code>changeset pre exit</code>, <code>changeset version</code> and merge into <code>main</code> - could be automated with a pr in ci</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>What if a hotfix must be applied to the <code>rc</code> branch?</p><p>Should it be rebased from <code>dev</code>? Should it be applied directly to <code>rc</code> and then upstreamed to <code>dev</code>?</p><p>This is the most difficult part of the process.</p><p>Still work in progess</p></div><h4 id="storing-a-release-for-an-lts" tabindex="-1">Storing a release for an LTS <a class="header-anchor" href="#storing-a-release-for-an-lts" aria-label="Permalink to &quot;Storing a release for an LTS&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>not implemented</p></div><p>Is this possible only when using a sync strategy?</p><h2 id="nx-release" tabindex="-1">nx release <a class="header-anchor" href="#nx-release" aria-label="Permalink to &quot;nx release&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>nx release is in beta</p></div><p>As anticipated in <a href="./nx.html#release">nx</a>, the release process is managed by the <code>nx release</code> command and is split in 3 commands or 1 that does it all.</p><p>While <code>nx version</code> and <code>nx changelog</code> are good, they lack some features and are quite strict on customization options.</p><h3 id="the-problems" tabindex="-1"><strong>The problems</strong> <a class="header-anchor" href="#the-problems" aria-label="Permalink to &quot;**The problems**&quot;">​</a></h3><p>We are now referring to individual commands.</p><h4 id="nx-version" tabindex="-1">nx version <a class="header-anchor" href="#nx-version" aria-label="Permalink to &quot;nx version&quot;">​</a></h4><ul><li>the command bumps versions based on conventional commits if configured</li><li>can enter pre-release mode by specifying <code>--preid</code> flag</li><li>requires manual versioning when switching off of <code>preid</code>, doesn&#39;t keep track of stable versions and doesn&#39;t reconcile it with the pre-release version automatically</li></ul><h4 id="nx-changelog" tabindex="-1">nx changelog <a class="header-anchor" href="#nx-changelog" aria-label="Permalink to &quot;nx changelog&quot;">​</a></h4><ul><li>the <code>nx release changelog</code> command requires manually specifying the version to generate the changelogs (one may suppose it would be the version bumped by <code>nx version</code> and read from the package.jsons?)</li><li>the <code>nx release changelog</code> is composed of too many steps: generate changelogs, commit, tag, push, create github releases (if configured in <code>nx.json</code>)</li><li>can&#39;t be customized to add assets to the release</li></ul><h4 id="nx-publish" tabindex="-1">nx publish <a class="header-anchor" href="#nx-publish" aria-label="Permalink to &quot;nx publish&quot;">​</a></h4><ul><li>this is actually the most useful command, as it allows to publish all subprojects and override the default publish command by adding <code>nx-release-publish</code> to <code>project.json</code></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>this runs the command on every project even if <code>private: true</code> is set.</p><p>If it&#39;s an npm project running the default <code>[p]npm publish</code> command, it will ignore the package.</p></div><p><em>e.g.</em></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;smispi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;$schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../../node_modules/nx/schemas/project-schema.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libs/smispi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;projectType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;library&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;targets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;nx-release-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./gradlew :libs:smispi:publishAndReleaseToMavenCentral --no-configuration-cache&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,37),l=[t];function o(h,p,r,d,c,k){return i(),e("div",null,l)}const E=s(n,[["render",o]]);export{u as __pageData,E as default};
