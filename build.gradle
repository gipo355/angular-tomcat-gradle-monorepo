import jdk.tools.jlink.resources.plugins

// NOTE: is there a better more modern way to do this to pass plugins down to subprojects?
buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		gradlePluginPortal()
	}

	// TODO: why do we need to specify them here? can't we use them in plugins{}?
	dependencies {
		classpath(libs.bundles.tools)
	}
}

// TOP LEVEL CONFIG to format root level files
// TODO: format root level files with :task
plugins {
	id 'project-report'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'groovy'
}

def TARGET = "$rootDir/build.gradle, $rootDir/settings.gradle, $rootDir/gradle.properties, $rootDir/gradle/*.gradle"

repositories {
	mavenCentral()
}

spotless {
	format 'misc', {
		target '**/*.gradle'

		targetExclude commonExcludes

		trimTrailingWhitespace()

		indentWithTabs()

		endWithNewline()
	}

	groovy   {
		target '**/*.gradle'

		importOrder()

		removeSemicolons()

		greclipse()

		// Add a license header to all files
		// licenseHeader('/* (C) $YEAR */') // or licenseHeaderFile
	}

	groovyGradle {
		target '**/*.gradle'

		targetExclude commonExcludes

		greclipse()
	}
}

tasks.register("fix") {
	dependsOn "spotlessApply"
}

// passing all those to subprojects
subprojects {
	repositories {
		mavenCentral()
	}

	// ### PLUGINS
	apply from: "${rootDir}/gradle/plugins.settings.gradle"

	// ### GLOBAL
	apply from: "${rootDir}/gradle/global.settings.gradle"

	// ### DEPENDENCIES
	apply from: "${rootDir}/gradle/dependencies.settings.gradle"

	// ### SPOTLESS
	apply from : "${rootDir}/gradle/spotless.settings.gradle"

	// ### REWRITE
	apply from : "${rootDir}/gradle/rewrite.settings.gradle"

	// ### CHECKSTYLE
	apply from : "${rootDir}/gradle/checkstyle.settings.gradle"

	// ### TESTS
	apply from : "${rootDir}/gradle/test.settings.gradle"

	// ### TASKS
	apply from : "${rootDir}/gradle/tasks.settings.gradle"
}


allprojects {
	apply {
		plugin("project-report")
	}
}

tasks.register("projectReportAll") {
	// All project reports of subprojects
	allprojects.forEach {
		dependsOn(it.tasks.getAt("projectReport"))
	}

	// All projectReportAll of included builds
	gradle.includedBuilds.forEach {
		dependsOn(it.task(":projectReportAll"))
	}
}
