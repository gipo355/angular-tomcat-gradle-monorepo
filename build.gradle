// NOTE: what is this?
import jdk.tools.jlink.resources.plugins

// NOTE: is theree a better more modern way to do this to pass plugins down to subprojects?
buildscript {
  // needed for applying plugins to subprojects
  repositories {
    mavenCentral()
    // provide gradle repo for plugins
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    gradlePluginPortal()
  }

  dependencies {
    // classpath("org.openrewrite:rewrite-gradle-plugin:6.16.0")
    classpath "org.openrewrite:plugin:6.16.0"
    classpath  "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
    classpath("com.github.spotbugs.snom:spotbugs-gradle-plugin:6.0.17")
    classpath("name.remal.gradle-plugins.sonarlint:sonarlint:4.2.4")
    classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.15.0")
  }
}

// https://github.com/openrewrite/rewrite/issues/1263

// https://discuss.gradle.org/t/multi-module-project-how-where-to-apply-plugins/46701/2

// passing all those to subprojects
subprojects {

  // all subprojects will have those repos, no need to specify
  repositories {
    mavenCentral()
    gradlePluginPortal()
  //   // gradle plugins
  //   maven {
  //     url "https://plugins.gradle.org/m2/"
  //   }
  }

  // not working
  // https://plugins.gradle.org/plugin/org.openrewrite.rewrite
  // plugins {
  //   id 'project-report'
  //   id 'java'
  //   id 'maven-publish'
  //   id 'java-library'
  //   id 'jacoco'
  //   id 'groovy'
  //   id 'checkstyle'
  //   // id "com.vanniktech.maven.publish" version "0.28.0"
  //   // id 'com.diffplug.spotless' version '6.25.0'
  //   // id 'org.openrewrite.rewrite' version '6.16.0'
  //   // id "com.github.spotbugs" version "6.0.17"
  //   // id "name.remal.sonarlint" version "4.2.3"
  //   // id 'info.solidsoft.pitest' version '1.15.0'
  // }

  apply {
      plugin("java")
      plugin("maven-publish")
      plugin('java-library')
      plugin("project-report")
    	plugin('jacoco')
      plugin('war')
      plugin('idea')
      plugin('eclipse')
      plugin('checkstyle')
      plugin('groovy')

      plugin('org.openrewrite.rewrite')
      // https://plugins.gradle.org/plugin/com.diffplug.gradle.spotless
      plugin("com.diffplug.spotless")
      plugin("com.github.spotbugs")
      plugin("name.remal.sonarlint")
      plugin('info.solidsoft.pitest')

  }

  dependencies {
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.2")
	  testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.2")

    // tools
    rewrite("org.openrewrite.recipe:rewrite-static-analysis:1.9.0")

    rewrite("org.openrewrite.recipe:rewrite-java-security:2.9.0")
  }

// ### SPOTLESS
  spotless {
    format 'misc', {
      target '*.gradle'

      targetExclude commonExcludes

      trimTrailingWhitespace()

      indentWithTabs()

      endWithNewline()
    }

    format 'xml', {
      target '*.xml'

      targetExclude commonExcludes

      eclipseWtp('xml')
    }

    format 'styling', {
      targetExclude commonExcludes

      target  '**/*.json', '**/*.yaml', '**/*.toml', '**/*.js', '**/*.cjs', '**/*.mjs'

      prettier(['prettier-plugin-toml': '2.0.1']).config(['plugins': ['prettier-plugin-toml']])
	  }

    groovy {
      importOrder()

      removeSemicolons()

      greclipse()

      // Add a license header to all files
      // licenseHeader('/* (C) $YEAR */') // or licenseHeaderFile
    }

    groovyGradle {
      target '*.gradle'

      targetExclude commonExcludes

      greclipse()
    }

    java {
      importOrder()

      removeUnusedImports()

      cleanthat()

      trimTrailingWhitespace()

      endWithNewline()

      googleJavaFormat()

      formatAnnotations()

      // licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
    }
  } // ### SPOTLESS

  // ### REWRITE,
  rewrite {
    activeRecipe("org.openrewrite.staticanalysis.CodeCleanup")

    activeRecipe("org.openrewrite.java.security.PartialPathTraversalVulnerability")

    activeRecipe("org.openrewrite.java.security.JavaSecurityBestPractices")

    activeRecipe("org.openrewrite.java.security.RegularExpressionDenialOfService")
  } // ### REWRITE

  // ### CHECKSTYLE
  checkstyle {
    toolVersion '10.17.0'

    // configDirectory = '../../checkstyle'
    // configDirectory = file("../../checkstyle")

    ignoreFailures = false

    maxWarnings = 0
  } // ### CHECKSTYLE

  // ## JACOCO report for test coverage and codecov
  // test {
  //   finalizedBy jacocoTestReport
  //
  //   useJUnitPlatform()
  // }
// override root project config
  test {
    // dependsOn 'check'

    finalizedBy jacocoTestReport

    useJUnitPlatform {
      exclude("**/integration/**")
    }

    testLogging {
      events "passed", "skipped", "failed"
    }
  }

  jacocoTestReport {
    dependsOn test

    reports {
      xml.required = true
    }
  }

  // ### PIT
  pitest {
	junit5PluginVersion = '1.2.1'

	pitestVersion = '1.15.2'
}

  // those are not picked up by nx must add them to project.json
  // standardizing tasks across nx monorepo for both java and js
  // to ease up CI/CD
  // those tasks are given to all subprojects
  tasks.register("fix") {
	dependsOn "spotlessApply"
	dependsOn "rewriteRun"
}

tasks.register("lint") {
	dependsOn "check"
}

  tasks.register("buildWar") {
	dependsOn "check"
	dependsOn "test"
	dependsOn "war"
}

task cleanEclipse(type: Delete, overwrite: true) {
	delete '.project'

	delete '.classpath'

	delete '.settings'

	delete "bin"
}

tasks.register('integrationTest', Test) {
	group = 'verification'

	useJUnitPlatform {
		include("**/integration/**")
	}

	testLogging {
		events "passed", "skipped", "failed"
	}
}

} // subprojects
